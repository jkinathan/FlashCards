{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { decksList } from \"./_DATA\";\nexport var DECK_STORAGE_KEY = \"mobileflashcards:decks\";\nexport function getDecks() {\n  var data;\n  return _regeneratorRuntime.async(function getDecks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECK_STORAGE_KEY));\n\n        case 3:\n          data = _context.sent;\n\n          if (data === null) {\n            AsyncStorage.setItem(DECK_STORAGE_KEY, JSON.stringify(decksList));\n          }\n\n          return _context.abrupt(\"return\", data === null ? decksList : JSON.parse(data));\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function getDeck(title) {\n  var data;\n  return _regeneratorRuntime.async(function getDeck$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECK_STORAGE_KEY));\n\n        case 3:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(data)[title]);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function saveDeckTitle(title) {\n  return _regeneratorRuntime.async(function saveDeckTitle$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECK_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            title: title,\n            questions: []\n          }))));\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\nexport function removeDeckFromStorage(id) {\n  var decksData, _decksList;\n\n  return _regeneratorRuntime.async(function removeDeckFromStorage$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECK_STORAGE_KEY));\n\n        case 3:\n          decksData = _context4.sent;\n          _decksList = JSON.parse(decksData);\n          _decksList[id] = undefined;\n          delete _decksList[id];\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(DECK_STORAGE_KEY, JSON.stringify(_decksList)));\n\n        case 9:\n          _context4.next = 14;\n          break;\n\n        case 11:\n          _context4.prev = 11;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n}\n;\nexport function addCardToDeck(title, card) {\n  var deck;\n  return _regeneratorRuntime.async(function addCardToDeck$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(getDeck(title));\n\n        case 3:\n          deck = _context5.sent;\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECK_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            questions: _toConsumableArray(deck.questions).concat(card)\n          }))));\n\n        case 6:\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function resetDecks() {\n  return _regeneratorRuntime.async(function resetDecks$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(DECK_STORAGE_KEY, JSON.stringify(decksList)));\n\n        case 3:\n          _context6.next = 8;\n          break;\n\n        case 5:\n          _context6.prev = 5;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}","map":{"version":3,"sources":["/home/kinathan/Desktop/RelWorx/FlashCards/utils/api.js"],"names":["AsyncStorage","decksList","DECK_STORAGE_KEY","getDecks","getItem","data","setItem","JSON","stringify","parse","console","log","getDeck","title","saveDeckTitle","mergeItem","questions","removeDeckFromStorage","id","decksData","undefined","addCardToDeck","card","deck","concat","resetDecks"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\nimport { decksList } from './_DATA';\n\nexport const DECK_STORAGE_KEY = \"mobileflashcards:decks\"\n\n/**\n * @description Return all the decks in the database\n * @returns {object} data\n */\nexport async function getDecks () {\n    try {\n        const data  = await AsyncStorage.getItem(DECK_STORAGE_KEY);\n        if (data  === null) {\n          AsyncStorage.setItem(DECK_STORAGE_KEY, JSON.stringify(decksList));\n        }\n        return data  === null ? decksList : JSON.parse(data);\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n/**\n * @description Return deck by id in the database\n * @param {string} title \n * @returns {object} dataById\n */\nexport async function getDeck(title) {\n    try {\n      const data = await AsyncStorage.getItem(DECK_STORAGE_KEY);\n  \n      return JSON.parse(data)[title];\n    } catch (err) {\n      console.log(err);\n    }\n}\n\n/**\n * @description Save Deck as a title\n * @param {string} title \n */\nexport async function saveDeckTitle(title) {\n    try {\n      await AsyncStorage.mergeItem(\n        DECK_STORAGE_KEY,\n        JSON.stringify({\n          [title]: {\n            title,\n            questions: []\n          }\n        })\n      );\n    } catch (err) {\n      console.log(err);\n    }\n}\n\n/**\n * @description Remove Deck from Storage\n * @param {string} id \n */\nexport async function removeDeckFromStorage(id) {\n    try {\n      const decksData = await AsyncStorage.getItem(DECK_STORAGE_KEY);\n      const decksList = JSON.parse(decksData);\n  \n      decksList[id] = undefined;\n      delete decksList[id];\n      await AsyncStorage.setItem(DECK_STORAGE_KEY, JSON.stringify(decksList));\n    } catch (e) {\n      console.log(e);\n    }\n};\n\n/**\n * @description Add Card to the Deck\n * @param {string} title \n * @param {object} card \n */\nexport async function addCardToDeck(title, card) {\n    try {\n      const deck = await getDeck(title);\n  \n      await AsyncStorage.mergeItem(\n        DECK_STORAGE_KEY,\n        JSON.stringify({\n          [title]: {\n            questions: [...deck.questions].concat(card)\n          }\n        })\n      );\n    } catch (err) {\n      console.log(err);\n    }\n}\n\n/**\n * @description Reset all deck in storage\n */\nexport async function resetDecks() {\n    try {\n      await AsyncStorage.setItem(DECK_STORAGE_KEY, JSON.stringify(decksList));\n    } catch (err) {\n      console.log(err);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}