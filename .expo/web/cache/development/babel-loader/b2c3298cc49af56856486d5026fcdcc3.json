{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/kinathan/Desktop/RelWorx/FlashCards/components/Quiz/Quiz.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { connect } from 'react-redux';\nimport { clearLocalNotification, setLocalNotification } from \"../../utils/notification\";\nimport QuizError from \"./QuizError\";\nimport QuizResult from \"./QuizResult\";\nimport { black, white, red, green, azure, lightPurp } from \"../../utils/colors\";\nimport CustomClickButton from \"../component/CustomClickButton\";\nimport TextButton from \"../component/TextButton\";\n\nvar Quiz = function (_Component) {\n  _inherits(Quiz, _Component);\n\n  var _super = _createSuper(Quiz);\n\n  function Quiz() {\n    var _this;\n\n    _classCallCheck(this, Quiz);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      title: '',\n      currentQuestion: '',\n      currentAnswer: '',\n      correctAnswer: 0,\n      incorrectAnswer: 0,\n      questionNumber: 0,\n      numberOfQuestions: 0,\n      score: 0,\n      quizFinished: false,\n      errorShow: false,\n      questions: ''\n    };\n\n    _this.resetQuiz = function () {\n      _this.setState({\n        title: '',\n        currentQuestion: _this.state.questions[0].question,\n        currentAnswer: '',\n        correctAnswer: 0,\n        incorrectAnswer: 0,\n        questionNumber: 1,\n        score: 0,\n        quizFinished: false,\n        errorShow: false\n      });\n    };\n\n    _this.updateScore = function () {\n      var newScore = _this.state.score + 1;\n\n      _this.setState({\n        score: newScore\n      });\n    };\n\n    _this.showAnswer = function () {\n      if (_this.state.currentAnswer === '') _this.setState({\n        currentAnswer: _this.state.questions[_this.state.questionNumber - 1].answer,\n        errorShow: false\n      });\n    };\n\n    _this.nextQuestion = function (isCorrect) {\n      if (_this.state.currentAnswer === '') {\n        _this.setState({\n          errorShow: true\n        });\n      } else {\n        if (isCorrect) {\n          _this.setState({\n            correctAnswer: _this.state.correctAnswer + 1\n          });\n\n          _this.updateScore();\n        } else {\n          _this.setState({\n            incorrectAnswer: _this.state.incorrectAnswer + 1\n          });\n        }\n\n        _this.updateQuestion();\n      }\n    };\n\n    _this.updateQuestion = function () {\n      var newQuestionNumber = _this.state.questionNumber + 1;\n\n      if (newQuestionNumber - 1 < _this.state.numberOfQuestions) {\n        _this.setState({\n          currentAnswer: '',\n          currentQuestion: _this.state.questions[newQuestionNumber - 1].question,\n          questionNumber: newQuestionNumber\n        });\n      } else {\n        _this.setState({\n          quizFinished: true\n        });\n      }\n    };\n\n    _this.backToDeckDetails = function () {\n      _this.props.navigation.navigate('Decks');\n    };\n\n    return _this;\n  }\n\n  _createClass(Quiz, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      clearLocalNotification().then(setLocalNotification);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          navigation = _this$props.navigation,\n          deck = _this$props.deck;\n      var title = navigation.getParam('title', 'undefined');\n      var questions = deck.questions;\n      var currentQuestion = questions.length != 0 ? questions[0].question : \"\";\n      this.setState({\n        title: title,\n        currentQuestion: currentQuestion,\n        questionNumber: 1,\n        questions: questions,\n        numberOfQuestions: questions.length,\n        quizFinished: false,\n        errorShow: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          numberOfQuestions = _this$state.numberOfQuestions,\n          quizFinished = _this$state.quizFinished;\n\n      if (numberOfQuestions === 0) {\n        return React.createElement(QuizError, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 20\n          }\n        });\n      }\n\n      console.log(\"quizFinished : \", quizFinished);\n\n      if (quizFinished === true) {\n        var _this$state2 = this.state,\n            correctAnswer = _this$state2.correctAnswer,\n            incorrectAnswer = _this$state2.incorrectAnswer,\n            _numberOfQuestions = _this$state2.numberOfQuestions,\n            score = _this$state2.score;\n        var scorePercentValue = (correctAnswer / _numberOfQuestions * 100).toFixed(0);\n        return React.createElement(QuizResult, {\n          deck: this.props.deck,\n          navigation: this.props.navigation,\n          handleReset: this.resetQuiz,\n          percent: scorePercentValue,\n          correctAnswer: correctAnswer,\n          incorrectAnswer: incorrectAnswer,\n          score: score,\n          returnBack: this.backToDeckDetails,\n          quizFinished: quizFinished,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return React.createElement(View, {\n        style: styles.mainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          alignItems: 'flex-start',\n          color: white\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, this.state.title, \" Quiz\"), React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          alignItems: 'flex-end',\n          color: white\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }\n      }, \"Score: \", this.state.score)), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.titleText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }\n      }, \"Question \", this.state.questionNumber, \" of \", this.state.numberOfQuestions)), React.createElement(Text, {\n        style: styles.questionText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, this.state.currentQuestion), React.createElement(TextButton, {\n        style: styles.buttonText,\n        onPress: function onPress() {\n          return _this2.showAnswer();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }\n      }, \"Show Answer\"), React.createElement(Text, {\n        style: styles.questionText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }\n      }, this.state.currentAnswer), React.createElement(CustomClickButton, {\n        btnStyle: {\n          backgroundColor: green,\n          borderColor: white\n        },\n        onPress: function onPress() {\n          return _this2.nextQuestion(true);\n        },\n        disabled: this.state.quizFinished == true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }\n      }, \"Correct\"), React.createElement(CustomClickButton, {\n        btnStyle: {\n          backgroundColor: red,\n          borderColor: white\n        },\n        onPress: function onPress() {\n          return _this2.nextQuestion(false);\n        },\n        disabled: this.state.quizFinished == true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }\n      }, \"InCorrect\"), this.state.errorShow && React.createElement(Text, {\n        style: styles.questionText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }\n      }, \"Please, click answer first\")));\n    }\n  }]);\n\n  return Quiz;\n}(Component);\n\nvar styles = StyleSheet.create({\n  mainView: {\n    flex: 1,\n    justifyContent: 'space-between',\n    backgroundColor: azure,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  titleText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    paddingTop: 30,\n    paddingBottom: 20,\n    color: white\n  },\n  questionText: {\n    fontSize: 20,\n    fontWeight: 'normal',\n    color: white,\n    paddingLeft: 20,\n    paddingRight: 20,\n    paddingTop: 20,\n    paddingBottom: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: white,\n    backgroundColor: lightPurp,\n    paddingTop: 20,\n    paddingBottom: 20,\n    padding: 20,\n    borderColor: white,\n    borderRadius: 5,\n    borderWidth: 1\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var navigation = _ref.navigation;\n  var title = navigation.getParam('title', 'undefined');\n  var deck = state[title];\n  return {\n    deck: deck\n  };\n};\n\nexport default connect(mapStateToProps)(Quiz);","map":{"version":3,"sources":["/home/kinathan/Desktop/RelWorx/FlashCards/components/Quiz/Quiz.js"],"names":["React","Component","connect","clearLocalNotification","setLocalNotification","QuizError","QuizResult","black","white","red","green","azure","lightPurp","CustomClickButton","TextButton","Quiz","state","title","currentQuestion","currentAnswer","correctAnswer","incorrectAnswer","questionNumber","numberOfQuestions","score","quizFinished","errorShow","questions","resetQuiz","setState","question","updateScore","newScore","showAnswer","answer","nextQuestion","isCorrect","updateQuestion","newQuestionNumber","backToDeckDetails","props","navigation","navigate","then","deck","getParam","length","console","log","scorePercentValue","toFixed","styles","mainView","header","fontSize","alignItems","color","titleText","questionText","buttonText","backgroundColor","borderColor","StyleSheet","create","flex","justifyContent","paddingTop","paddingLeft","paddingRight","paddingBottom","flexDirection","fontWeight","textAlign","padding","borderRadius","borderWidth","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Text, View, StyleSheet } from 'react-native';\nimport { connect } from 'react-redux';\nimport { clearLocalNotification, setLocalNotification } from '../../utils/notification';\nimport QuizError from \"./QuizError\";\nimport QuizResult from './QuizResult';\nimport { black, white, red, green, azure, lightPurp  } from '../../utils/colors';\nimport CustomClickButton from \"../component/CustomClickButton\"\nimport TextButton from \"../component/TextButton\"\n\nclass Quiz extends Component {\n\n    state = {\n        title: '',\n        currentQuestion: '',\n        currentAnswer: '',\n        correctAnswer: 0,\n        incorrectAnswer: 0,\n        questionNumber: 0,\n        numberOfQuestions: 0,\n        score: 0,\n        quizFinished: false,\n        errorShow: false,\n        questions: ''\n    }\n\n    resetQuiz = () => {\n        this.setState({\n          title: '',  \n          currentQuestion: this.state.questions[0].question,\n          currentAnswer: '',\n          correctAnswer: 0,\n          incorrectAnswer: 0,\n          questionNumber: 1,\n          score: 0,\n          quizFinished: false,\n          errorShow: false,\n        });\n    }\n\n    componentDidMount() {\n        clearLocalNotification().then(setLocalNotification);\n    }\n\n    componentWillMount() {\n        const { navigation, deck } = this.props;\n        const title = navigation.getParam('title', 'undefined');\n        const questions = deck.questions;\n        const currentQuestion = questions.length != 0 ? questions[0].question : \"\";\n\n        this.setState({\n            title: title,\n            currentQuestion: currentQuestion,\n            questionNumber: 1,\n            questions: questions,\n            numberOfQuestions: questions.length,\n            quizFinished: false,\n            errorShow: false,\n        })\n    }\n\n    updateScore = () => {\n        const newScore = this.state.score + 1;\n        this.setState({\n          score: newScore\n        })\n    }\n\n    showAnswer = () => {\n\n        if (this.state.currentAnswer === '')\n          this.setState({\n            currentAnswer: this.state.questions[this.state.questionNumber-1].answer,\n            errorShow: false\n        })\n    }\n\n    nextQuestion = (isCorrect) => {\n        \n        \n        if (this.state.currentAnswer === '') {\n            this.setState({\n                errorShow: true\n            });\n        }\n        else {\n\n            if (isCorrect) {\n\n                this.setState({\n                    correctAnswer: this.state.correctAnswer + 1\n                });\n\n                this.updateScore();\n            }else {\n    \n                this.setState({\n                    incorrectAnswer: this.state.incorrectAnswer + 1\n                })\n\n            }\n\n\n            this.updateQuestion();\n\n        }\n        \n    }\n\n    updateQuestion = () => {\n        const newQuestionNumber = this.state.questionNumber + 1;\n        if (newQuestionNumber-1 < this.state.numberOfQuestions) {\n            this.setState({\n              currentAnswer: '',\n              currentQuestion: this.state.questions[newQuestionNumber-1].question,\n              questionNumber: newQuestionNumber,\n            });\n        } else {\n            this.setState({\n                quizFinished: true\n            })\n        }\n    }\n\n    backToDeckDetails = () => {\n        this.props.navigation.navigate(\n          'Decks'\n        );\n    }\n\n    render() {\n\n        const {numberOfQuestions, quizFinished } = this.state;\n\n        if (numberOfQuestions === 0) {\n            return <QuizError />;\n        }\n\n        console.log(\"quizFinished : \", quizFinished);\n\n        if (quizFinished === true) {\n            const { correctAnswer, incorrectAnswer , numberOfQuestions, score } = this.state;\n            const scorePercentValue = ((correctAnswer / numberOfQuestions) * 100).toFixed(0);\n            \n            return (\n                <QuizResult\n                    deck={this.props.deck}\n                    navigation={this.props.navigation}\n                    handleReset={this.resetQuiz}\n                    percent={scorePercentValue}\n                    correctAnswer = {correctAnswer}\n                    incorrectAnswer = {incorrectAnswer}\n                    score = {score}\n                    returnBack = {this.backToDeckDetails}\n                    quizFinished = {quizFinished}\n                />\n            );\n        }\n\n        return (\n\n            <View style={styles.mainView}>\n                <View style={styles.header}>\n                    <Text style={{fontSize: 20, alignItems: 'flex-start' ,color: white}}>{this.state.title} Quiz</Text>\n                    <Text style={{fontSize: 20, alignItems: 'flex-end' ,color: white}}>Score: {this.state.score}</Text>\n                </View>\n\n                <View>\n                    <View>\n                        <Text style={styles.titleText}>Question {this.state.questionNumber} of {this.state.numberOfQuestions}</Text>\n                    </View>\n                    <Text style={styles.questionText}>\n                        {this.state.currentQuestion}\n                    </Text>\n\n                    <TextButton style={styles.buttonText} \n                                onPress={() => this.showAnswer()}>\n                                Show Answer\n                    </TextButton>\n\n                    <Text style={styles.questionText}>\n                          {this.state.currentAnswer}\n                    </Text>\n\n                    <CustomClickButton\n                        btnStyle={{ backgroundColor: green, borderColor: white }}\n                        onPress={() => this.nextQuestion(true) }\n                        disabled={this.state.quizFinished == true}\n                    >\n                        Correct\n                    </CustomClickButton>\n\n                    <CustomClickButton\n                        btnStyle={{ backgroundColor: red, borderColor: white }}\n                        onPress={() => this.nextQuestion(false)}\n                        disabled={this.state.quizFinished == true}\n                    >\n                        InCorrect\n                    </CustomClickButton>\n\n                    { this.state.errorShow &&\n                        <Text style={styles.questionText}>\n                            Please, click answer first\n                        </Text>\n                    }\n\n                </View>\n\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    mainView: {\n        flex:1,\n        justifyContent: 'space-between',\n        backgroundColor: azure,\n        paddingTop: 16,\n        paddingLeft: 16,\n        paddingRight: 16,\n        paddingBottom: 16,\n    },\n    header: {\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n    },\n    titleText: {\n        fontSize: 30,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        paddingTop: 30,\n        paddingBottom: 20,\n        color: white\n    },\n    questionText: {\n        fontSize: 20,\n        fontWeight: 'normal',\n        color: white,\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingTop: 20,\n        paddingBottom: 20,\n    },\n    buttonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        color: white,\n        backgroundColor: lightPurp,\n        paddingTop: 20,\n        paddingBottom: 20,\n        padding: 20,\n        borderColor: white,\n        borderRadius: 5,\n        borderWidth: 1\n    }\n});\n\nconst mapStateToProps = (state, { navigation }) => {\n    const title = navigation.getParam('title', 'undefined');\n    const deck = state[title];\n  \n    return {\n      deck\n    };\n};\n\n\nexport default connect(mapStateToProps)(Quiz);"]},"metadata":{},"sourceType":"module"}