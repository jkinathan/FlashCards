{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getDecks, saveDeckTitle, removeDeckFromStorage, addCardToDeck } from \"../utils/api\";\nexport var RECEIVE_DECKS = \"RECEIVE_DECKS\";\nexport var ADD_DECK = \"ADD_DECK\";\nexport var ADD_CARD = \"ADD_CARD\";\nexport var REMOVE_DECK = \"REMOVE_DECK\";\nexport var RESET_DATA = \"RESET_DATA\";\nexport function receiveDecksAction(decks) {\n  return {\n    type: RECEIVE_DECKS,\n    decks: decks\n  };\n}\nexport function addDeckAction(title) {\n  return {\n    type: ADD_DECK,\n    title: title\n  };\n}\nexport function addCardToDeckAction(title, card) {\n  return {\n    type: ADD_CARD,\n    title: title,\n    card: card\n  };\n}\nexport function removeDeckAction(title) {\n  return {\n    type: REMOVE_DECK,\n    title: title\n  };\n}\nexport var resetData = function resetData() {\n  return {\n    type: RESET_DATA\n  };\n};\nexport var getAllDecks = function getAllDecks() {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              getDecks().then(function (decks) {\n                dispatch(receiveDecksAction(decks));\n              });\n            } catch (error) {\n              console.error('Error reading decks from file', error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addDeck = function addDeck(title) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            saveDeckTitle(title);\n            return _context2.abrupt(\"return\", dispatch(addDeckAction(title)));\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('Error saving new deck', _context2.t0);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n};\nexport var addCardToTheDeck = function addCardToTheDeck(title, card) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            try {\n              addCardToDeck(title, card).then(function (r) {\n                return dispatch(addCardToDeckAction(title, card));\n              });\n            } catch (error) {\n              console.error('Error adding card to the deck', error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var removeDeck = function removeDeck(title) {\n  return function _callee4(dispatch) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            try {\n              removeDeckFromStorage(title).then(function (r) {\n                return dispatch(removeDeckAction(title));\n              });\n            } catch (error) {\n              console.error('Error removing deck', error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/kinathan/Desktop/RelWorx/FlashCards/actions/index.js"],"names":["getDecks","saveDeckTitle","removeDeckFromStorage","addCardToDeck","RECEIVE_DECKS","ADD_DECK","ADD_CARD","REMOVE_DECK","RESET_DATA","receiveDecksAction","decks","type","addDeckAction","title","addCardToDeckAction","card","removeDeckAction","resetData","getAllDecks","dispatch","then","error","console","addDeck","addCardToTheDeck","r","removeDeck"],"mappings":"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","sourcesContent":["import {getDecks, saveDeckTitle, removeDeckFromStorage, addCardToDeck} from '../utils/api';\n\nexport const RECEIVE_DECKS = \"RECEIVE_DECKS\";\nexport const ADD_DECK = \"ADD_DECK\";\nexport const ADD_CARD = \"ADD_CARD\";\nexport const REMOVE_DECK = \"REMOVE_DECK\";\nexport const RESET_DATA = \"RESET_DATA\";\n\nexport function receiveDecksAction(decks) {\n    return {\n      type: RECEIVE_DECKS,\n      decks\n    };\n}\n  \nexport function addDeckAction(title){\n    return {\n      type: ADD_DECK,\n      title\n    };\n}\n  \nexport function addCardToDeckAction(title, card){\n    return {\n      type: ADD_CARD,\n      title,\n      card\n    };\n}\n  \nexport function removeDeckAction(title){\n    return {\n        type: REMOVE_DECK,\n        title\n    };\n}\n\nexport const resetData = () => ({\n    type: RESET_DATA\n});\n\n\nexport const getAllDecks = () => async(dispatch) => {\n    try {\n        getDecks().then(decks => {\n            dispatch(receiveDecksAction(decks))\n        })\n    } \n    catch(error) {\n        console.error('Error reading decks from file', error);\n    }\n}\n  \nexport const addDeck = (title) => async(dispatch) => {\n    try {\n        saveDeckTitle(title)\n        return dispatch(addDeckAction(title))\n    } catch (error) {\n        console.error('Error saving new deck', error);\n    }\n}\n\nexport const addCardToTheDeck = (title, card) => async(dispatch) => {\n    try {\n        addCardToDeck(title, card).then(\n            r =>dispatch(addCardToDeckAction(title, card)))\n    } catch (error) {\n        console.error('Error adding card to the deck', error);\n    }\n}\n\nexport const removeDeck = (title) => async(dispatch) => {\n    try {\n        removeDeckFromStorage(title).then(r => dispatch(removeDeckAction(title)))\n    } catch (error) {\n        console.error('Error removing deck', error);\n    }\n}"]},"metadata":{},"sourceType":"module"}