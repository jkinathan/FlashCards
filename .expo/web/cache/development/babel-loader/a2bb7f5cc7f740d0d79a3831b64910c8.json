{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RECEIVE_DECKS, ADD_DECK, ADD_CARD, REMOVE_DECK, RESET_DATA } from \"../actions/index\";\nimport { decksList } from \"../utils/_DATA\";\nvar initialState = decksList;\n\nfunction decks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_DECKS:\n      {\n        return _objectSpread(_objectSpread({}, state), action.decks);\n      }\n\n    case ADD_DECK:\n      {\n        var title = action.title;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, title, {\n          title: title,\n          questions: []\n        }));\n      }\n\n    case ADD_CARD:\n      {\n        var _title = action.title,\n            card = action.card;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, _title, _objectSpread(_objectSpread({}, state[_title]), {}, {\n          questions: _toConsumableArray(state[_title].questions).concat(card)\n        })));\n      }\n\n    case REMOVE_DECK:\n      {\n        var _action$title = action.title,\n            value = state[_action$title],\n            restOfState = _objectWithoutProperties(state, [_action$title].map(_toPropertyKey));\n\n        return _objectSpread({}, restOfState);\n      }\n\n    case RESET_DATA:\n      {\n        return startingDecks;\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default decks;","map":{"version":3,"sources":["/home/kinathan/Desktop/RelWorx/FlashCards/reducer/index.js"],"names":["RECEIVE_DECKS","ADD_DECK","ADD_CARD","REMOVE_DECK","RESET_DATA","decksList","initialState","decks","state","action","type","title","questions","card","concat","value","restOfState","startingDecks"],"mappings":";;;;;;;;;;;;AAAA,SACIA,aADJ,EAEIC,QAFJ,EAGIC,QAHJ,EAIIC,WAJJ,EAKIC,UALJ;AAOA,SAASC,SAAT;AAGA,IAAMC,YAAY,GAAGD,SAArB;;AAEA,SAASE,KAAT,GAA6C;AAAA,MAA9BC,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;;AAEzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAL;AAAoB;AAClB,+CACKQ,KADL,GAEKC,MAAM,CAACF,KAFZ;AAID;;AACD,SAAKN,QAAL;AAAe;AAAA,YACLU,KADK,GACKF,MADL,CACLE,KADK;AAGb,+CACKH,KADL,2BAEGG,KAFH,EAEW;AACPA,UAAAA,KAAK,EAALA,KADO;AAEPC,UAAAA,SAAS,EAAE;AAFJ,SAFX;AAOD;;AACD,SAAKV,QAAL;AAAe;AAAA,YACLS,MADK,GACWF,MADX,CACLE,KADK;AAAA,YACEE,IADF,GACWJ,MADX,CACEI,IADF;AAEb,+CACKL,KADL,2BAEGG,MAFH,kCAGOH,KAAK,CAACG,MAAD,CAHZ;AAIIC,UAAAA,SAAS,EAAE,mBAAIJ,KAAK,CAACG,MAAD,CAAL,CAAaC,SAAjB,EAA4BE,MAA5B,CAAmCD,IAAnC;AAJf;AAOD;;AACD,SAAKV,WAAL;AAAkB;AAAA,4BACPM,MAAM,CAACE,KADA;AAAA,YACQI,KADR,GACkCP,KADlC;AAAA,YACkBQ,WADlB,4BACkCR,KADlC;;AAEhB,iCACKQ,WADL;AAGD;;AACD,SAAKZ,UAAL;AAAiB;AACf,eAAOa,aAAP;AACD;;AACD;AACE,aAAOT,KAAP;AAtCJ;AAwCH;;AAED,eAAeD,KAAf","sourcesContent":["import {\n    RECEIVE_DECKS,\n    ADD_DECK,\n    ADD_CARD,\n    REMOVE_DECK,\n    RESET_DATA\n  } from \"../actions/index\";\nimport { decksList } from \"../utils/_DATA\";\n\n\nconst initialState = decksList;\n\nfunction decks(state = initialState, action) {\n    \n    switch (action.type) {\n      case RECEIVE_DECKS: {\n        return {\n          ...state,\n          ...action.decks\n        };\n      }\n      case ADD_DECK: {\n        const { title } = action;\n  \n        return {\n          ...state,\n          [title]: {\n            title,\n            questions: []\n          }\n        };\n      }\n      case ADD_CARD: {\n        const { title, card } = action;\n        return {\n          ...state,\n          [title]: {\n            ...state[title],\n            questions: [...state[title].questions].concat(card)\n          }\n        };\n      }\n      case REMOVE_DECK: {\n        const { [action.title]: value, ...restOfState } = state;\n        return {\n          ...restOfState\n        };\n      }\n      case RESET_DATA: {\n        return startingDecks;\n      }\n      default:\n        return state;\n    }\n}\n\nexport default decks;\n  \n"]},"metadata":{},"sourceType":"module"}