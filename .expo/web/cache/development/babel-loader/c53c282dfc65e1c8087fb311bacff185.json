{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/kinathan/Desktop/RelWorx/FlashCards/components/Quiz/QuizResult.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { gray, red, green, azure, lightPurp, white, orange, customRedColor } from \"../../utils/colors\";\nimport CustomClickButton from \"../component/CustomClickButton\";\n\nvar QuizResult = function (_Component) {\n  _inherits(QuizResult, _Component);\n\n  var _super = _createSuper(QuizResult);\n\n  function QuizResult() {\n    var _this;\n\n    _classCallCheck(this, QuizResult);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      status: true\n    };\n    return _this;\n  }\n\n  _createClass(QuizResult, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.quizFinished == true) {\n        this.setState({\n          status: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          deck = _this$props.deck,\n          handleReset = _this$props.handleReset,\n          returnBack = _this$props.returnBack,\n          percent = _this$props.percent,\n          correctAnswer = _this$props.correctAnswer,\n          incorrectAnswer = _this$props.incorrectAnswer,\n          score = _this$props.score;\n      return React.createElement(View, {\n        style: styles.mainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.quizFinishedText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, \"Quiz Finished!\"), React.createElement(Text, {\n        style: [styles.questionText, styles.textCenter],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }, \"Deck Title : \", deck.title), React.createElement(View, {\n        style: styles.quizReview,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: [styles.questionText, styles.textCenter],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }\n      }, \"Quiz Result Review\"), React.createElement(Text, {\n        style: [styles.questionText, styles.textCenter],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }\n      }, \"Score : \", score), React.createElement(Text, {\n        style: [styles.questionText, styles.textCenter],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }\n      }, \"Correct Answer : \", correctAnswer), React.createElement(Text, {\n        style: [styles.questionText, styles.textCenter],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }\n      }, \"Incorrect Answer : \", incorrectAnswer), React.createElement(Text, {\n        style: [styles.questionText, styles.textCenter],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }\n      }, \"Score Percentage : \", percent, \" %\")), React.createElement(CustomClickButton, {\n        btnStyle: {\n          backgroundColor: orange,\n          borderColor: white\n        },\n        onPress: function onPress() {\n          return handleReset();\n        },\n        disabled: this.state.status == true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }, \"Reset Quiz\"), React.createElement(CustomClickButton, {\n        btnStyle: {\n          backgroundColor: gray,\n          borderColor: white\n        },\n        onPress: function onPress() {\n          return returnBack();\n        },\n        disabled: this.state.status == true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }, \"Go Back\"));\n    }\n  }]);\n\n  return QuizResult;\n}(Component);\n\nvar styles = StyleSheet.create({\n  mainView: {\n    flex: 1,\n    justifyContent: 'space-between',\n    backgroundColor: azure,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16\n  },\n  quizFinishedText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: orange,\n    paddingTop: 30,\n    paddingBottom: 20\n  },\n  questionText: {\n    fontSize: 20,\n    fontWeight: 'normal',\n    color: white,\n    paddingLeft: 10,\n    paddingRight: 10,\n    paddingTop: 10,\n    paddingBottom: 10\n  },\n  textCenter: {\n    textAlign: 'center'\n  },\n  quizReview: {\n    backgroundColor: lightPurp,\n    paddingLeft: 10,\n    paddingRight: 10,\n    paddingTop: 10,\n    paddingBottom: 10\n  }\n});\nexport default QuizResult;","map":{"version":3,"sources":["/home/kinathan/Desktop/RelWorx/FlashCards/components/Quiz/QuizResult.js"],"names":["React","Component","gray","red","green","azure","lightPurp","white","orange","customRedColor","CustomClickButton","QuizResult","state","status","props","quizFinished","setState","deck","handleReset","returnBack","percent","correctAnswer","incorrectAnswer","score","styles","mainView","quizFinishedText","questionText","textCenter","title","quizReview","backgroundColor","borderColor","StyleSheet","create","flex","justifyContent","paddingTop","paddingLeft","paddingRight","paddingBottom","fontSize","fontWeight","textAlign","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport { gray, red, green,  azure ,lightPurp, white, orange, customRedColor  } from '../../utils/colors';\nimport CustomClickButton from \"../component/CustomClickButton\"\n\nclass QuizResult extends Component {\n\n\n    state = {\n        status: true\n    }\n\n    componentDidMount() {\n        if(this.props.quizFinished == true) {\n            this.setState({\n                status: false\n            })\n        }\n    }\n\n    render() {\n\n        const {deck, handleReset, returnBack, percent, correctAnswer , incorrectAnswer, score } = this.props;\n\n        return (\n            <View style={styles.mainView}>\n                <Text style={styles.quizFinishedText}>Quiz Finished!</Text>\n                <Text style={[styles.questionText, styles.textCenter]}>Deck Title : {deck.title}</Text>\n                <View style={styles.quizReview}>\n                    <Text style={[styles.questionText, styles.textCenter]}>Quiz Result Review</Text>\n                    <Text style={[styles.questionText, styles.textCenter]}>Score : {score}</Text>\n                    <Text style={[styles.questionText, styles.textCenter]}>Correct Answer : {correctAnswer}</Text>\n                    <Text style={[styles.questionText, styles.textCenter]}>Incorrect Answer : {incorrectAnswer}</Text>\n                    <Text style={[styles.questionText, styles.textCenter]}>Score Percentage : {percent} %</Text>\n                </View>\n                <CustomClickButton\n                        btnStyle={{ backgroundColor: orange, borderColor: white }}\n                        onPress={() => handleReset()}\n                        disabled={this.state.status == true}\n                    >\n                        Reset Quiz\n                </CustomClickButton>\n\n                <CustomClickButton\n                        btnStyle={{ backgroundColor: gray, borderColor: white }}\n                        onPress={() => returnBack()}\n                        disabled={this.state.status == true}\n                    >\n                        Go Back\n                </CustomClickButton>\n          </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    mainView: {\n        flex:1,\n        justifyContent: 'space-between',\n        backgroundColor: azure,\n        paddingTop: 16,\n        paddingLeft: 16,\n        paddingRight: 16,\n        paddingBottom: 16,\n    },\n    quizFinishedText: {\n        fontSize: 30,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        color: orange,\n        paddingTop: 30,\n        paddingBottom: 20,\n      },\n    questionText: {\n        fontSize: 20,\n        fontWeight: 'normal',\n        color: white,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingTop: 10,\n        paddingBottom: 10,\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    quizReview: {\n        backgroundColor: lightPurp,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingTop: 10,\n        paddingBottom: 10,\n    }\n});\n\nexport default QuizResult;"]},"metadata":{},"sourceType":"module"}